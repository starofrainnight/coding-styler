#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Invoke source code formater for all source files
if [ ! -f .coding-style ]; then
    echo "File '.coding-style' not found!"
    exit 1
fi

style_file=`cat .coding-style | grep "style:" | cut -c7- | xargs`
file_patterns_text=`cat .coding-style | grep "patterns:" | cut -c10- | xargs`
IFS=',' read -ra file_patterns <<< $file_patterns_text

# If .coding-style does not have "style_file:" and "patterns:", it will failed to commit
if [ -z "$style_file" ] || [ -z "$file_patterns_text" ]; then 
	cat <<\EOF
Error: Format invalid of file '.coding-style'!

Sample '.coding-style' :

style_file: .uncrustify.cfg
patterns: *.cpp, *.c, *.ino
cppcheck: true
EOF
	exit 2
fi

git diff --cached --name-only $against | while read file_path
do
	# Trim all space and lower all character's case.
	afile_path=`echo "$file_path" | xargs | tr '[:upper:]' '[:lower:]'`
	for afile_pattern in "${file_patterns[@]}"; do		
    	afile_pattern=`echo "$afile_pattern" | xargs | tr '[:upper:]' '[:lower:]'`
    	
    	if [[ $afile_path != $afile_pattern ]]; then
			continue
    	fi
		
		file_format_command="uncrustify -c $style_file --check $file_path"
		eval $file_format_command
		if [ "$?" == "0" ]; then
			continue  
		fi
		
		file_format_command="uncrustify -c $style_file --no-backup $file_path" 
		echo $file_format_command
		eval $file_format_command
		git add $file_path 
	done
done

if_do_cppcheck=`cat .coding-style | grep "cppcheck:" | cut -c10- | xargs | tr '[:upper:]' '[:lower:]'`
if [ "$if_do_cppcheck" == "true" ]; then
	# We should not pass non-C/C++ files to cppcheck. Filter filenames with pattern.
	pattern='\.(c|cpp|cc|cxx|h|hpp)$'
	changed_files=$(git diff-index --cached --name-only $against | grep -E $pattern)
	if [ -n "$changed_files" ]; then
		cppcheck --error-exitcode=3 $changed_files
		if [ "$?" == "3" ]; then
			exit 3
		fi
	fi
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi



# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
