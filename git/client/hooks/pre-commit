#!/usr/bin/env python
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

import os
import os.path
import sys
import subprocess
import yaml
import locale
import fnmatch
import re
import six

def print_err(astr):
	six.print_(astr, file=sys.stderr)

def dict_get(adict, key, default=None):
	ret = adict.get(key, default)
	if (ret is None) and (default is not None):
		ret = default
	return ret

# os.system("git rev-parse --verify HEAD >/dev/null 2>&1")
result = subprocess.call("git rev-parse --verify HEAD", shell=True)
if not result:
	against = "HEAD"
else:
	# Initial commit: diff against an empty tree object
	against = "4b825dc642cb6eb9a060e54bf8d69288fbee4904"

# Invoke source code formater for all source files
coding_style_file_name = ".coding-style"
if not os.path.exists(coding_style_file_name):
	print_err("File '%s' not found!" % coding_style_file_name)
	sys.exit(1)

configs = yaml.load(open(coding_style_file_name))

value = configs.get("cppcheck", False)
if value is None:
	configs["cppcheck"] = False

value = configs.get("include-patterns")
if value is None:
	configs["include-patterns"] = []

value = configs.get("exclude-patterns")
if value is None:
	configs["exclude-patterns"] = []

# Force coding stylers to take effect on stashed files
staged_files = subprocess.check_output("git diff --cached --name-only %s" % against, shell=True)
staged_files = staged_files.decode(locale.getdefaultlocale()[1])
staged_files = staged_files.strip().splitlines()
if len(staged_files) <= 0:
	print_err("No staged files !")
	sys.exit(2)

# If you want to allow non-ASCII filenames set this variable to true.
try:
	allownonascii_text = subprocess.check_output(
		"git config --bool hooks.allownonascii", shell=True).strip()
except subprocess.CalledProcessError:
	allownonascii_text = ""
allownonascii = 'true' in allownonascii_text.lower()

parsing_count = 0
for file_path in staged_files:
	print("==========\n%s: Parsing %s" % (parsing_count, file_path))
	parsing_count += 1

	is_included = False
	for pattern in configs["include-patterns"]:
		if fnmatch.fnmatch(file_path, pattern):
			is_included = True
			break

	if not is_included:
		print("Not include this file name pattern !")
		continue

	is_ignored = False
	for pattern in configs["exclude-patterns"]:
		if fnmatch.fnmatch(file_path, pattern):
			is_ignored = True
			break

	if is_ignored:
		print("Excluded this file name pattern !")
		continue

	if not os.path.exists(file_path):
		print("File not found : %s" % file_path)
		continue

	# We should clear the source file before check names or other stuffs
	command = "uncrustify -l CPP -c %s --check %s" % (configs.get("format-style"), file_path)
	print(command)
	ret = subprocess.call(command, shell=True)
	if ret != 0:
		command = "uncrustify -l CPP -c %s --no-backup %s" % (configs.get("format-style"), file_path)
		print(command)
		subprocess.call(command, shell=True)

	command = "ncstyler -c %s %s" % (configs.get("name-style"), file_path)
	print(command)
	ret = subprocess.call(command, shell=True)
	if ret != 0:
		sys.exit(3)

	command = "git add %s" % file_path
	subprocess.call(command, shell=True)

	if not allownonascii:
		if re.match(r"^[\w\.]+$", os.path.basename(file_path)) is None:
			print("""Error: Attempt to add a non-ASCII file name (%s).

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

    git config hooks.allownonascii true""" % file_path)
			sys.exit(5)

	if configs.get("cppcheck"):
		command = "cppcheck %s" % file_path
		print(command)
		ret = subprocess.call(command, shell=True)
		if ret != 0:
			sys.exit(6)

# Don't allow automatic filemode changing, if you want to do some, just use
# command like : git update-index --chmod=+x script.sh
subprocess.call("git config core.filemode false", shell=True)

sys.exit(0)
